// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: category.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    name, created_by
) VALUES (
    $1, $2
)
RETURNING id, name, created_by, is_visible, created_at, updated_at
`

type CreateCategoryParams struct {
	Name      string `json:"name"`
	CreatedBy string `json:"created_by"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.Name, arg.CreatedBy)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.IsVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name, created_by, is_visible, created_at, updated_at FROM categories
WHERE id = $1 AND is_visible = true
LIMIT 1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.IsVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, created_by, is_visible, created_at, updated_at FROM categories
WHERE is_visible = true
ORDER BY id
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedBy,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
