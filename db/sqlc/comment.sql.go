// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: comment.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
    topic_id, body, created_by
) VALUES (
    $1, $2, $3
) RETURNING id, topic_id, body, points, created_by, is_visible, created_at, updated_at
`

type CreateCommentParams struct {
	TopicID   int64  `json:"topic_id"`
	Body      string `json:"body"`
	CreatedBy string `json:"created_by"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.TopicID, arg.Body, arg.CreatedBy)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.TopicID,
		&i.Body,
		&i.Points,
		&i.CreatedBy,
		&i.IsVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decreaseCommentPointsByID = `-- name: DecreaseCommentPointsByID :exec
UPDATE comments
SET points = points - 1, updated_at = now()
WHERE id = $1 AND is_visible = true
`

func (q *Queries) DecreaseCommentPointsByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, decreaseCommentPointsByID, id)
	return err
}

const getCommentByID = `-- name: GetCommentByID :one
SELECT id, topic_id, body, points, created_by, is_visible, created_at, updated_at FROM comments
WHERE id = $1 AND is_visible = true
LIMIT 1
`

func (q *Queries) GetCommentByID(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentByID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.TopicID,
		&i.Body,
		&i.Points,
		&i.CreatedBy,
		&i.IsVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hideCommentByID = `-- name: HideCommentByID :exec
UPDATE comments
SET is_visible = false, updated_at = now()
WHERE id = $1
`

func (q *Queries) HideCommentByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, hideCommentByID, id)
	return err
}

const increaseCommentPointsByID = `-- name: IncreaseCommentPointsByID :exec
UPDATE comments
SET points = points + 1, updated_at = now()
WHERE id = $1 AND is_visible = true
`

func (q *Queries) IncreaseCommentPointsByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, increaseCommentPointsByID, id)
	return err
}

const listCommentsByTopicID = `-- name: ListCommentsByTopicID :many
SELECT id, topic_id, body, points, created_by, is_visible, created_at, updated_at FROM comments
WHERE topic_id = $1 AND is_visible = true
ORDER BY created_at
`

func (q *Queries) ListCommentsByTopicID(ctx context.Context, topicID int64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByTopicID, topicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.TopicID,
			&i.Body,
			&i.Points,
			&i.CreatedBy,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommentByID = `-- name: UpdateCommentByID :exec
UPDATE comments
SET body = $2, updated_at = now()
WHERE id = $1 AND is_visible = true
`

type UpdateCommentByIDParams struct {
	ID   int32  `json:"id"`
	Body string `json:"body"`
}

func (q *Queries) UpdateCommentByID(ctx context.Context, arg UpdateCommentByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateCommentByID, arg.ID, arg.Body)
	return err
}
