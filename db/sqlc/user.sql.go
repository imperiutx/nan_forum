// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
)

const banUser = `-- name: BanUser :exec
UPDATE users
SET is_banned = true
WHERE id = $1
`

func (q *Queries) BanUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, banUser, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_name, email, hashed_password, is_banned, is_admin
) VALUES (
             $1, $2, $3, $4, $5
)
RETURNING id, user_name, email, hashed_password, is_banned, is_admin, created_at, updated_at
`

type CreateUserParams struct {
	UserName       string `json:"user_name"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	IsBanned       bool   `json:"is_banned"`
	IsAdmin        bool   `json:"is_admin"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserName,
		arg.Email,
		arg.HashedPassword,
		arg.IsBanned,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.HashedPassword,
		&i.IsBanned,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, user_name, email, hashed_password, is_banned, is_admin, created_at, updated_at FROM users
WHERE email = $1 AND is_banned = false
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.HashedPassword,
		&i.IsBanned,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, user_name, email, hashed_password, is_banned, is_admin, created_at, updated_at FROM users
WHERE id = $1 AND is_banned = false
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.HashedPassword,
		&i.IsBanned,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT id, user_name, email, hashed_password, is_banned, is_admin, created_at, updated_at FROM users
WHERE user_name = $1 AND is_banned = false
LIMIT 1
`

func (q *Queries) GetUserByUserName(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserName, userName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.HashedPassword,
		&i.IsBanned,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, user_name, email, hashed_password, is_banned, is_admin, created_at, updated_at FROM users
WHERE is_banned = false
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.Email,
			&i.HashedPassword,
			&i.IsBanned,
			&i.IsAdmin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setAdmin = `-- name: SetAdmin :exec
UPDATE users
SET is_admin = true
WHERE id = $1
`

func (q *Queries) SetAdmin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, setAdmin, id)
	return err
}

const unBanUser = `-- name: UnBanUser :exec
UPDATE users
SET is_banned = false
WHERE id = $1
`

func (q *Queries) UnBanUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, unBanUser, id)
	return err
}

const unSetAdmin = `-- name: UnSetAdmin :exec
UPDATE users
SET is_admin = false
WHERE id = $1
`

func (q *Queries) UnSetAdmin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, unSetAdmin, id)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET hashed_password = $2
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID             int32  `json:"id"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.ID, arg.HashedPassword)
	return err
}
